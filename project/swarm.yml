version: '3'

services:   

  caddy:
    image: manzcube/micro-caddy:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "80:80"
      - "443:443"
    volumes: #making some files avaible to the swarm.yml
      - caddy_data:/data
      - caddy_config:/config

  front-end:
    image: manzcube/front-end:1.0.1
    deploy:
      mode: replicated
      replicas: 1
    environment:
      BROKER_URL: http://backend

  broker-service:
    image: manzcube/broker-service:1.0.1
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    image: manzcube/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  logger-service:
    image: manzcube/logger-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  authentication-service:
    image: manzcube/authentication-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  mailer-service:
    image: manzcube/mailer-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith"
      FROM_ADDRESS: "john.smith@example.com"

  rabbitmq:
    image: "rabbitmq:3.9-alpine"
    deploy: 
      mode: replicated #just one instance
      replicas: 1

  mailhog: 
    image: "mailhog/mailhog:latest"
    ports: 
      - "8025:8025"
    deploy:
      mode: global

  mongo: 
    image: 'mongo:4.2.17-bionic'
    ports: 
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  postgres: #use linode mysql or postgress db instance to connect from outside the swarm
    image: "postgres:14.2"
    ports: 
      - "5432:5432"
    deploy: 
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

volumes:
  caddy_data:
    external: true
  caddy_config:

      # docker swarm init //Initialize swarm
      # docker build -f service-name.dockerfile -t username/service-name:version . //Build tagged v from image
      # docker push username/service-name:version //Push to DockerHub
      # docker stack deploy -c swarm.yml myapp //Deploy services to docker hub
      # docker service ls  //See all services running
      # docker service scale myapp_service.name=2  //Scale up or down
      # docker build -f service-name.dockerfile -t username/service-name:new-version .  //Build another tagged version
      # docker build -f service-name.dockerfile -t username/service-name:new-version .  //Update version
      # docker service update --image username/service.name:version myapp_service-name //Update specific verison
      # docker stack rm my_app /Delete swarm
      # docker swarm leave /Delete worker node
